EC2 Elastic Compute Cloud:
-------------------------
Amazon EC2:
-----------
- EC2 is one of the most popular of AWS offering.
- EC2 = Elastic Compute Cloud = Infrastructure as a Service (IAAS)
- It mainly consists in the capability of:
	- Renting virtual machines (EC2 Instances)
	- Storing data on virtual drives (EBS volumes)
	- Distributing load across machines (ELB - Elastic Load Balancer)
	- Scaling the services using an auto-scaling group (ASG)
- Knowing EC2 is fundamental to understand how the Cloud works.

EC2 Sizing & Configuration options [What options we can choose for our virtual instances/servers that we rent from AWS]:
-----------------------------------------------------------------------------------------------------------------------
- Operating System (OS): Linux, Windows or Mac OS
- How much compute power & cores (CPU)
- How much random-access memory (RAM)
- How much storage space:
	- Network-attached (EBS & EFS)
	- hardware (EC2 Instance Store)
- Network card: speed of the card, Public IP address
- Firewall rules: security group
- Bootstrap script (configure at first launch): EC2 User Data

EC2 User Data:
--------------
- It is possible to bootstrap our instances using EC2 User data script.
- bootstraping means launching commands when a machine starts.
- That script is only run once at the instance first start.
- EC2 user data is used to automate boot tasks such as:
	- Installing updates
	- Installing Software
	- Download common files from the internet
	- Anything you can think of
- The more we add into out User data scripts, the more your instance has to do at runtime.
- Teh EC2 User Data Script runs with the root user. So, any command we have, will have the pseudo rights.
- When you launch an instance in Amazon EC2, you have the option of passing user data to the instance that can be used to perform common automated configuration tasks and even run scripts after the instance starts. You can pass two types of user data to Amazon EC2: shell scripts and cloud-init directives.
- The User Data will run only once in the whole lifecycle of the instance.

EC2 instance types: example:
----------------------------
Instance         vCPU [Cores]        Mem(GiB)[RAM]       Storage          Network Performance        EBS Bandwidth(Mbps)
--------         ------------        -------------       -------          -------------------        -------------------
t2.micro            1                   1                 EBS-Only         Low to Moderate     
t2.xlarge           4                   16                EBS-Only          Moderate                 
c5d.4xlarge         16                  32            1 x 400 NVMe SSD     Upto 10 Gbps                 4,750
r5.16xlarge         64                  512               EBS Only          20 Gbps                     13,600
m5.8xlarge          32                  128               EBS Only          10 Gbps                     6,800 

- t2.micro is part of the AWS free tier (up to 750 hours per month)

-----------------------------------

EC2 instance Types - Overview:
-----------------------------
- You can use different types of EC2 instances that are optimised for different use cases (https://aws.amazon.com/ec2/instance-types/)
- AWS as the following naming convention:
	m5.2xlarge
	o m: instance class
	o 5: generation (AWS improves them over time)
	o 2xlarge: size within the instance class
- Different types:
	1. General Purpose
	2. Compute Optimized
	3. Memory Optimized
	4. Accelerated Computing
	5. Storage Optimized
	6. Instance Features
	7. Measuring Instance Performance
	
EC2 instance Types - General Purpose:
------------------------------------
- Great for a diversity of workloads such as web servers or code repositories.
- Balance between:
	o Compute
	o Memory
	o Networking
- Instances: Mac, T4g, T3, T3a, T2, M6g, M5, M5a, M5n, M5zn, M4, A1

EC2 instance Types - Compute Optimized:
--------------------------------------
- Great for computer-intensive tasks that require high performance processors:
	o Batch Processing
	o Media Transcoding
	o High Performance web servers
	o High Performance computing (HPC)
	o Scientific modeling & machine learning
	o Dedicated gaming servers
- Best for High-Performance Computing (HPC) application. Needs more CPU.
- Tasks that need high level processors.
- Instances: C6g, C6gn, C5, C5a, C5n, C4

EC2 instance Types - Memory Optimized:
--------------------------------------
- Fast performance for workloads that process large data sets in memory.
- Memory Optimized EC2 instances are great for workloads requiring large data sets in memory.
- Use cases:
	o High performance, relational/non-relational databases
	o Distributed web scale cache stores
	o In-memory databases optimized for BI (business Intelligence)
	o Applications performing real-time processing of big unstructured data.
- Tasks that need more RAM. Used for Caching.
- Instances: R6g, R5, R5a, R5b, R5n, R4, X1e, X1, High Memory, z1d

EC2 instance Types - Storage Optimized:
--------------------------------------
- Great for storage-intensive tasks that require high, sequential read and write access to large data sets on local storage.
- Use cases:
	o High frequency online transaction processing (OLTP) systems
	o Relational & NoSQL databases
	o Cache for in-mamory databases (for example, Redis)
	o Data warehousing applications
	o Distributed file systems
- Tasks that need more storage.
- Instances: I3, I3en, D2, D3, D3en, H1

-----------------------------------

Introduction to Security Groups:
-------------------------------
- Security Groups are the fundamental of network security in AWS.
- They control how traffic is allowed into or out of our EC2 Instances.
- For exaple, if we try to access an EC2 Instance from outside, the Security Group controls the Inbound traffic to the EC2 Instance and outbound traffic from the EC2 Instance.
- Security groups only contain "allow" rules.
- Security groups rules can reference by IP or by security group.
- These acts as firewalls for EC2 Instances and control trffics in and out of the instance.

Security Groups Deeper Dive:
---------------------------
- Security groups are acting as a "firewall" on EC2 instances.
- The regulate:
	o Access to Ports
	o Authorised IP ranges - IPv4 and IPv6
	o Control of inbound network (from other to the instance)
	o Control of outbound network (from instance to other)

Types				Protocol				Port Range					Source					Description
-----				--------				----------					------					-----------
HTTP				TCP						80						0.0.0.0/0					test http page
SSH					TCP						22						122.149.196.85/32
Custom TCP Rule		TCP						4567					0.0.0.0/0					java app

- Each security group attached to the EC2 instance have Inbound and Outbound rules (e.g: Filter IP/Port with Rules).
- For example, let's just say with a Filter IP/Port with Rules Security Groups, I can access the EC2 instance with my IP address with authorised port 22 but someone else with a different IP address cannot access the instance as for it the port 22 is not authorised because the firewall will block it. But for outbound rule, by default the EC2 instance for ay Security Group allows any traffic out o fit (WWW, Any Ip - Any Port). So, if the EC2 instance wants to secure a connection with any website, it will be allowed by the security group.
- Secure Groups have ID.
- Inbound Rules control the connectivity from the outside world into the instance.

Security Groups Good to know:
----------------------------
- Can be attached to multiple instances and one instance can have multiple Security Groups.
- Locked down to a region/VPC combination. So, if we switch to a different region or switch to a diferent VPC, we will need to create a new security group.
- Does live "outside" the EC2 - the traffic is blocked, the EC2 instace won't see it. So firewall blocks uauthorised access to EC2.
- It's good to maintain one separate security group for SSH access.
- If your application is not accessible (time out/Infinite loading), then it's a security group issue.
- If your application gives "connection refused" error, then it's an application error or it's not launched.
- By default, all inbound traffic is blocked and all outbound traffic is authorised.
- If IP changes then we will not be able to access the instance.
 
Referencing security groups from other security groups:
------------------------------------------------------
- Suppose we have a EC2 instance where Security Group 1 is attached where the inbound rule authorised Security Group 1 and Security Group 2, then other EC2 instances where Security Group 1 or Security Group 2 is attached, can access our EC2 instance.
- But a EC2 instance with Security Group 3 cannot access our EC2 instance.
- This can be very helpful to determine who can and who cannot access our instances. And it is used for Load balancing.

Classic Ports to know:
---------------------
- 22 = SSH (Secure Shell) - log into a Linux instance
- 21 = FTP (File Transfer Protocol) - upload files into a file share
- 22 = SFTP (Secure File Transfer Protocol) - upload files using SSH
- 80 = HTTP - access unsecured websites
- 443 = HTTPS - access secured websites
- 3389 = RDP (Remote Desktop Protocol) - log into a Windows instance

-----------------------------------

SSH Summary Table:
-----------------
- SSH can be used for Mac, Linux and Windows over 10.
- For Windows below 10, use putty.
- We can also use EC2 Instance Connect which supports all OS. We can use it using Amazon NX2. For this we need the SSH port(22) in the inbound rules.
- To use the SSH type this command: ssh -i '.\EC2 Tutorial.pem' ec2-user@<public_ip>
- To exit ssh: exit
- The Amazon AMI comes with the AWS CLI. So, we can use the aws commands inside the EC2 Instance Connect.
- So we can do aws configure into the EC2 Instance. But this is a bad idea. Because if we do this then anyone with our account can connect to the EC2 Instance connect and retreive the value of the credentials.
- NEVER enter your IAM Key ID and Access Key into the EC2 Instnace Connect.
- Instead use IAM roles to provide the instace with credentials.
- So rather than giving IAM user credentials to the EC2 directly for it to get permission to perform certain tasks, create a IAM Role for it and assign appropriate permissions to the Role.

-----------------------------------

EC2 Instances Purchasing Options:
--------------------------------
- On-Demand Instances - Short workload, predictable pricing, pay by second.
- Reserved (1 & 3 years, not 1 to 3 but 1 or 3):
	o Reserved Instances - long workloads
	o Convertible Reserved Instances - long workloads with flexible instances [Change Instance types over time]
- Savings Plans (1 & 3 years, not 1 to 3 but 1 or 3) - Commitment to an amount of usage, long workload
- Spot Instanes - Short workloads, cheap, can lose instances (less reliable)
- Dedicated Hosts - book an entire pysical server, control instance placement
- Dedicated Instances - no other customers will share your hardware
- Capacity Reservatios - reserve capacity in a specific AZ(Availability Zone) for any duration

EC2 On Demand:
-------------
• Pay for what you use:
• Linux or Windows - billing per second, after the first minute
• All other operating systems - billing per hour
• Has the highest cost but no upfront payment
• No long-term commitment
• Recommended for "short-term" and "un-interrupted workloads", where you can't predict how the application will behave.

EC2 Reserved Instances: [AZ]
----------------------
• Up to 72% (Can vary) discount compared to On-demand
• You reserve a specific instance attributes (Instance Type, Region, Tenancy, OS)
• Reservation Period – 1 year (+discount) or 3 years (+++discount)
• Payment Options – No Upfront (+), Partial Upfront (++), All Upfront (+++)
• Reserved Instance’s Scope – Regional or Zonal (reserve capacity in an AZ)
• Recommended for steady-state usage applications (think database)
• You can buy and sell in the Reserved Instance Marketplace
• Convertible Reserved Instance:
	• Can change the EC2 instance type, instance family, OS, scope and tenancy
	• Up to 66% (Can vary) discount

EC2 Savings Plans:
-----------------
• Get a discount based on long-term usage (up to 72% - same as RIs)
• Commit to a certain type of usage ($10/hour for 1 or 3 years)
• Usage beyond EC2 Savings Plans is billed at the On-Demand price
• Locked to a specific instance family & AWS region (e.g., M5 in us-east-1)
• Flexible across:
	• Instance Size (e.g., m5.xlarge, m5.2xlarge)
	• OS (e.g., Linux, Windows)
	• Tenancy (Host, Dedicated, Default)

EC2 Spot Instances:
------------------
• Can get a discount of up to 90% compared to On-demand
• Instances that you can “lose” at any point of time if your max price is less than the current spot price
• The MOST cost-efficient instances in AWS
• Useful for workloads that are resilient to failure
	• Batch jobs
	• Data analysis
	• Image processing
	• Any distributed workloads
	• Workloads with a flexible start and end time
• Not suitable for critical jobs or databases

EC2 Dedicated Hosts:
-------------------
• A physical server with EC2 instance capacity fully dedicated to your use
• Allows you address compliance requirements and use your existing server- bound software licenses (per-socket, per-core, pe—VM software licenses)
• Purchasing Options:
	• On-demand – pay per second for active Dedicated Host
	• Reserved - 1 or 3 years (No Upfront, Partial Upfront, All Upfront)
• The most expensive option
• Useful for software that have complicated licensing model (BYOL – Bring Your Own License)
• Or for companies that have strong regulatory or compliance needs

EC2 Dedicated Instances:
-----------------------
• Instances run on hardware that’s dedicated to you
• May share hardware with other instances in same account
• No control over instance placement (can move hardware after Stop / Start)
• Your instances run  ina a VPC on h/w that's dedicated to a single customer. Your Dedicated instances are physically isolated at the host hardware level from instances that belong to other AWS accounts.
• Dedicated instances may share hardware with other instances from the same AWS account that are not Dedicated instances.

EC2 Capacity Reservations: [AZ]
-------------------------
• Reserve On-Demand instances capacity in a specific AZ for any duration
• You always have access to EC2 capacity when you need it
• No time commitment (create/cancel anytime), no billing discounts
• Combine with Regional Reserved Instances and Savings Plans to benefit from billing discounts
• You’re charged at On-Demand rate whether you run instances or not
• Suitable for "short-term", "uninterrupted workloads" that needs to be in a specific AZ

Which purchasing option is right for me?
---------------------------------------
• On demand: coming and staying in resort whenever we like, we pay the full price
• Reserved: like planning ahead and if we plan to stay for a long time, we may get a good discount.
• Savings Plans: pay a certain amount per hour for certain period and stay in any room type (e.g., King, Suite, Sea View, …)
• Spot instances: the hotel allows people to bid for the empty rooms and the highest bidder keeps the rooms. You can get kicked out at any time
• Dedicated Hosts: We book an entire building of the resort
• Capacity Reservations: you book a room for a period with full price even you don’t stay in it

Dedicated Instance vs Dedicated Host:
------------------------------------
Characteristic												Dedicated Instances		Deicated Hosts
--------------												-------------------		--------------
Enables the use of dedicated physical servers					Y						Y
Per instance billing (subject to a $2 per region fee)			Y						N
Per host billing												N						Y
Visibility of Sockets, Cores, host ID							N						Y
Affinity between a host and instance							N						Y
Targeted instance placement										N						Y
Automatic instance placement									Y						Y
Add capacity using an allocation request						N						Y

• Dedicated Instance means we will have our own instance and our own h/w but dedicated host means we will have our own physical server itself and it gives us visibility to lower level h/w.

-----------------------------------

Shared Responsibility Model for EC2:
-----------------------------------
- AWS:
	o Infrastructure (global network security)
	o Isolation on Physical hosts
	o Replacing faulty hardware
	o Compliance Validation

- You:
	o Security Groups rules
	o Operating-system patches and updates
	o Software and utilities installed on the EC2 instance
	o IAM Roles assigned to EC2 & IAM user access management
	o Data security on your instance

-----------------------------------

EC2 Section – Summary:
---------------------
• EC2 Instance: AMI (OS) + Instance Size (CPU + RAM) + Storage + security groups + EC2 User Data
• Security Groups: Firewall attached to the EC2 instance
• EC2 User Data: Script launched at the first start of an instance
• SSH: start a terminal into our EC2 Instances (port 22)
• EC2 Instance Role: link to IAM roles
• Purchasing Options: On-Demand, Spot, Reserved (Standard + Convertible + Scheduled), Dedicated Host, Dedicated Instance

-----------------------------------

Notes:
------
- Process of creating a EC2 instance: Name -> AMI -> Instance Type -> Key-pair (login) [Necessary for SSH utility] -> Network Settings -> Configure Storage -> Advanced [User Data is added here]
- AMI - Amazon Machine Image - Basically what type OS with what configs you want in your EC2 instance.
- Firewall (security groups): A security group is a set of firewall rules that control the traffic for your instance. Add rules to allow specific traffic to reach your instance.
- Tick on SSH or HTTP or HTTPS to let those traffics access the EC2 instance.
- Public IPv4 address of the instance will be used to access it from the external servers.
- Private IPv4 address will be used to access the instance from the internal AWS network.
- When we stop and start an instane, the public IP will change but Private IP will remain same.
- Spot instance gives you the biggest discount but not good for databases.

-----------------------------------